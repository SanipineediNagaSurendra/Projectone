// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ApkFilewithAppium.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("BluetoothPermission")]
    public partial class BluetoothPermissionFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "BluetoothPermission.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "BluetoothPermission", "A short summary of the feature", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify option to request bluetooth permission")]
        [NUnit.Framework.CategoryAttribute("NAP")]
        [NUnit.Framework.CategoryAttribute("label:allure_id:1720251")]
        [NUnit.Framework.CategoryAttribute("tms:1720251")]
        [NUnit.Framework.CategoryAttribute("story:BluetoothPermission")]
        [NUnit.Framework.CategoryAttribute("parentSuite:BluetoothPermission")]
        [NUnit.Framework.CategoryAttribute("owner:QA")]
        public virtual void VerifyOptionToRequestBluetoothPermission()
        {
            string[] tagsOfScenario = new string[] {
                    "NAP",
                    "label:allure_id:1720251",
                    "tms:1720251",
                    "story:BluetoothPermission",
                    "parentSuite:BluetoothPermission",
                    "owner:QA"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify option to request bluetooth permission", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 6
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
        testRunner.Given("I launch the plugin app", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
        testRunner.And("I scroll \'Down\' and launch plugin \'BluetoothPermissionPlugin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
        testRunner.Then("verify \'Ok\' is \'displayed\' on \'BluetoothPermissionPluginPage\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify option to open settings in bluetooth permission page")]
        [NUnit.Framework.CategoryAttribute("NAP")]
        [NUnit.Framework.CategoryAttribute("label:allure_id:1720833")]
        [NUnit.Framework.CategoryAttribute("tms:1720833")]
        [NUnit.Framework.CategoryAttribute("story:BluetoothPermission")]
        [NUnit.Framework.CategoryAttribute("parentSuite:BluetoothPermission")]
        [NUnit.Framework.CategoryAttribute("owner:QA")]
        public virtual void VerifyOptionToOpenSettingsInBluetoothPermissionPage()
        {
            string[] tagsOfScenario = new string[] {
                    "NAP",
                    "label:allure_id:1720833",
                    "tms:1720833",
                    "story:BluetoothPermission",
                    "parentSuite:BluetoothPermission",
                    "owner:QA"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify option to open settings in bluetooth permission page", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 12
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 13
        testRunner.Given("I launch the plugin app", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 14
        testRunner.And("I scroll \'Down\' and launch plugin \'BluetoothPermissionPlugin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
        testRunner.And("I press \'Ok\' on \'BluetoothPermissionPluginPage\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
        testRunner.When("I \'Don’t allow\' permission request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 17
        testRunner.Then("verify \'OpenSettings\' is \'displayed\' on \'BluetoothPermissionPluginPage\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify bluetooth permissions granted already")]
        [NUnit.Framework.CategoryAttribute("NAP")]
        [NUnit.Framework.CategoryAttribute("label:allure_id:1720835")]
        [NUnit.Framework.CategoryAttribute("tms:1720835")]
        [NUnit.Framework.CategoryAttribute("story:BluetoothPermission")]
        [NUnit.Framework.CategoryAttribute("parentSuite:BluetoothPermission")]
        [NUnit.Framework.CategoryAttribute("owner:QA")]
        public virtual void VerifyBluetoothPermissionsGrantedAlready()
        {
            string[] tagsOfScenario = new string[] {
                    "NAP",
                    "label:allure_id:1720835",
                    "tms:1720835",
                    "story:BluetoothPermission",
                    "parentSuite:BluetoothPermission",
                    "owner:QA"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify bluetooth permissions granted already", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 20
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 21
        testRunner.Given("I launch the plugin app", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 22
        testRunner.And("I scroll \'Down\' and launch plugin \'BluetoothPermissionPlugin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
        testRunner.And("I press \'Ok\' on \'BluetoothPermissionPluginPage\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
        testRunner.When("I \'Don’t allow\' permission request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 25
        testRunner.Then("verify plugin is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify rationale on granting the bluetooth permissions")]
        [NUnit.Framework.CategoryAttribute("NAP")]
        [NUnit.Framework.CategoryAttribute("label:allure_id:1720846")]
        [NUnit.Framework.CategoryAttribute("tms:1720846")]
        [NUnit.Framework.CategoryAttribute("story:BluetoothPermission")]
        [NUnit.Framework.CategoryAttribute("parentSuite:BluetoothPermission")]
        [NUnit.Framework.CategoryAttribute("owner:QA")]
        public virtual void VerifyRationaleOnGrantingTheBluetoothPermissions()
        {
            string[] tagsOfScenario = new string[] {
                    "NAP",
                    "label:allure_id:1720846",
                    "tms:1720846",
                    "story:BluetoothPermission",
                    "parentSuite:BluetoothPermission",
                    "owner:QA"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify rationale on granting the bluetooth permissions", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 28
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 29
        testRunner.Given("I launch the plugin app", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 30
        testRunner.When("I scroll \'Down\' and launch plugin \'BluetoothPermissionPlugin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 31
        testRunner.Then("verify \'PermissionHeader\' is \'displayed\' on \'BluetoothPermissionPluginPage\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 32
        testRunner.And("verify \'PermissionBody\' is \'displayed\' on \'BluetoothPermissionPluginPage\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify bluetooth permission request through OS")]
        [NUnit.Framework.CategoryAttribute("NAP")]
        [NUnit.Framework.CategoryAttribute("label:allure_id:1720907")]
        [NUnit.Framework.CategoryAttribute("tms:1720907")]
        [NUnit.Framework.CategoryAttribute("story:BluetoothPermission")]
        [NUnit.Framework.CategoryAttribute("parentSuite:BluetoothPermission")]
        [NUnit.Framework.CategoryAttribute("owner:QA")]
        public virtual void VerifyBluetoothPermissionRequestThroughOS()
        {
            string[] tagsOfScenario = new string[] {
                    "NAP",
                    "label:allure_id:1720907",
                    "tms:1720907",
                    "story:BluetoothPermission",
                    "parentSuite:BluetoothPermission",
                    "owner:QA"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify bluetooth permission request through OS", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 35
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 36
        testRunner.Given("I launch the plugin app", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 37
        testRunner.And("I scroll \'Down\' and launch plugin \'BluetoothPermissionPlugin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 38
        testRunner.When("I press \'Ok\' on \'BluetoothPermissionPluginPage\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 39
        testRunner.Then("verify permission request alert is displayed and close alert", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify bluetooth permission is granted through OS")]
        [NUnit.Framework.CategoryAttribute("NAP")]
        [NUnit.Framework.CategoryAttribute("label:allure_id:1720926")]
        [NUnit.Framework.CategoryAttribute("tms:1720926")]
        [NUnit.Framework.CategoryAttribute("story:BluetoothPermission")]
        [NUnit.Framework.CategoryAttribute("parentSuite:BluetoothPermission")]
        [NUnit.Framework.CategoryAttribute("owner:QA")]
        public virtual void VerifyBluetoothPermissionIsGrantedThroughOS()
        {
            string[] tagsOfScenario = new string[] {
                    "NAP",
                    "label:allure_id:1720926",
                    "tms:1720926",
                    "story:BluetoothPermission",
                    "parentSuite:BluetoothPermission",
                    "owner:QA"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify bluetooth permission is granted through OS", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 42
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 43
        testRunner.Given("I launch the plugin app", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 44
        testRunner.And("I scroll \'Down\' and launch plugin \'BluetoothPermissionPlugin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
        testRunner.When("I press \'Ok\' on \'BluetoothPermissionPluginPage\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 46
        testRunner.When("I \'Don’t allow\' permission request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 47
        testRunner.Then("verify plugin is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify rationale on not granting the bluetooth permissions")]
        [NUnit.Framework.CategoryAttribute("NAP")]
        [NUnit.Framework.CategoryAttribute("label:allure_id:1720927")]
        [NUnit.Framework.CategoryAttribute("tms:1720927")]
        [NUnit.Framework.CategoryAttribute("story:BluetoothPermission")]
        [NUnit.Framework.CategoryAttribute("parentSuite:BluetoothPermission")]
        [NUnit.Framework.CategoryAttribute("owner:QA")]
        public virtual void VerifyRationaleOnNotGrantingTheBluetoothPermissions()
        {
            string[] tagsOfScenario = new string[] {
                    "NAP",
                    "label:allure_id:1720927",
                    "tms:1720927",
                    "story:BluetoothPermission",
                    "parentSuite:BluetoothPermission",
                    "owner:QA"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify rationale on not granting the bluetooth permissions", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 50
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 51
        testRunner.Given("I launch the plugin app", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 52
        testRunner.And("I scroll \'Down\' and launch plugin \'BluetoothPermissionPlugin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
        testRunner.When("I press \'Ok\' on \'BluetoothPermissionPluginPage\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 54
        testRunner.When("I \'Don’t allow\' permission request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 55
        testRunner.Then("verify \'PermissionHeader\' is \'displayed\' on \'BluetoothPermissionPluginPage\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 56
        testRunner.And("verify \'PermissionBody\' is \'displayed\' on \'BluetoothPermissionPluginPage\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify the app settings are displayed through OS for bluetooth permissions for An" +
            "droid")]
        [NUnit.Framework.CategoryAttribute("NAP")]
        [NUnit.Framework.CategoryAttribute("label:allure_id:1742944")]
        [NUnit.Framework.CategoryAttribute("tms:1742944")]
        [NUnit.Framework.CategoryAttribute("story:BluetoothPermission")]
        [NUnit.Framework.CategoryAttribute("parentSuite:BluetoothPermission")]
        [NUnit.Framework.CategoryAttribute("owner:QA")]
        [NUnit.Framework.CategoryAttribute("Android")]
        public virtual void VerifyTheAppSettingsAreDisplayedThroughOSForBluetoothPermissionsForAndroid()
        {
            string[] tagsOfScenario = new string[] {
                    "NAP",
                    "label:allure_id:1742944",
                    "tms:1742944",
                    "story:BluetoothPermission",
                    "parentSuite:BluetoothPermission",
                    "owner:QA",
                    "Android"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the app settings are displayed through OS for bluetooth permissions for An" +
                    "droid", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 59
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 60
        testRunner.Given("I launch the plugin app", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 61
        testRunner.And("I scroll \'Down\' and launch plugin \'BluetoothPermissionPlugin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 62
        testRunner.When("I press \'Ok\' on \'BluetoothPermissionPluginPage\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 63
        testRunner.When("I \'Don’t allow\' permission request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 64
        testRunner.And("I press \'OpenSettings\' on \'BluetoothPermissionPluginPage\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 65
        testRunner.Then("verify \'Permissions\' is \'displayed\' on \'NativeSettingsPage\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify permission flow is completed on granting bluetooth for Android")]
        [NUnit.Framework.CategoryAttribute("NAP")]
        [NUnit.Framework.CategoryAttribute("label:allure_id:1742994")]
        [NUnit.Framework.CategoryAttribute("tms:1742994")]
        [NUnit.Framework.CategoryAttribute("story:BluetoothPermission")]
        [NUnit.Framework.CategoryAttribute("parentSuite:BluetoothPermission")]
        [NUnit.Framework.CategoryAttribute("owner:QA")]
        [NUnit.Framework.CategoryAttribute("Android")]
        public virtual void VerifyPermissionFlowIsCompletedOnGrantingBluetoothForAndroid()
        {
            string[] tagsOfScenario = new string[] {
                    "NAP",
                    "label:allure_id:1742994",
                    "tms:1742994",
                    "story:BluetoothPermission",
                    "parentSuite:BluetoothPermission",
                    "owner:QA",
                    "Android"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify permission flow is completed on granting bluetooth for Android", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 68
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 69
        testRunner.Given("I launch the plugin app", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 70
        testRunner.And("I scroll \'Down\' and launch plugin \'BluetoothPermissionPlugin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 71
        testRunner.When("I press \'Ok\' on \'BluetoothPermissionPluginPage\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 72
        testRunner.When("I \'Don’t allow\' permission request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 73
        testRunner.And("I close and restart the TestSinglePluginApp", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
        testRunner.And("I press \'OpenSettings\' on \'BluetoothPermissionPluginPage\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 75
        testRunner.And("I press \'Permissions\' text on \'NativeSettingsPage\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 76
        testRunner.And("I scroll \'Down\' and press \'Nearby devices\' on \'NativeSettingsPage\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 77
        testRunner.And("I press \'Allow\' button on \'NativeSettingsPage\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 78
        testRunner.Then("verify plugin is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify permission flow is not proceeded on denying bluetooth for Android")]
        [NUnit.Framework.CategoryAttribute("NAP")]
        [NUnit.Framework.CategoryAttribute("label:allure_id:1742928")]
        [NUnit.Framework.CategoryAttribute("tms:1742928")]
        [NUnit.Framework.CategoryAttribute("story:BluetoothPermission")]
        [NUnit.Framework.CategoryAttribute("parentSuite:BluetoothPermission")]
        [NUnit.Framework.CategoryAttribute("owner:QA")]
        [NUnit.Framework.CategoryAttribute("Android")]
        public virtual void VerifyPermissionFlowIsNotProceededOnDenyingBluetoothForAndroid()
        {
            string[] tagsOfScenario = new string[] {
                    "NAP",
                    "label:allure_id:1742928",
                    "tms:1742928",
                    "story:BluetoothPermission",
                    "parentSuite:BluetoothPermission",
                    "owner:QA",
                    "Android"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify permission flow is not proceeded on denying bluetooth for Android", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 81
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 82
        testRunner.Given("I launch the plugin app", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 83
        testRunner.And("I scroll \'Down\' and launch plugin \'BluetoothPermissionPlugin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 84
        testRunner.When("I press \'Ok\' on \'BluetoothPermissionPluginPage\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 85
        testRunner.When("I \'Don’t allow\' permission request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 86
        testRunner.And("I press \'OpenSettings\' on \'BluetoothPermissionPluginPage\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 87
        testRunner.And("I press \'Permissions\' text on \'NativeSettingsPage\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 88
        testRunner.And("I scroll \'Down\' and press \'Nearby devices\' on \'NativeSettingsPage\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 89
        testRunner.And("I press \'Don’t allow\' button on \'NativeSettingsPage\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 90
        testRunner.Then("verify plugin is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify flow is completed on denying through OS for bluetooth permission")]
        [NUnit.Framework.CategoryAttribute("NAP")]
        [NUnit.Framework.CategoryAttribute("label:allure_id:1720928")]
        [NUnit.Framework.CategoryAttribute("tms:1720928")]
        [NUnit.Framework.CategoryAttribute("story:BluetoothPermission")]
        [NUnit.Framework.CategoryAttribute("parentSuite:BluetoothPermission")]
        [NUnit.Framework.CategoryAttribute("owner:QA")]
        public virtual void VerifyFlowIsCompletedOnDenyingThroughOSForBluetoothPermission()
        {
            string[] tagsOfScenario = new string[] {
                    "NAP",
                    "label:allure_id:1720928",
                    "tms:1720928",
                    "story:BluetoothPermission",
                    "parentSuite:BluetoothPermission",
                    "owner:QA"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify flow is completed on denying through OS for bluetooth permission", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 93
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 94
        testRunner.Given("I launch the plugin app", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 95
        testRunner.And("I scroll \'Down\' and launch plugin \'BluetoothPermissionPlugin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 96
        testRunner.When("I press \'Ok\' on \'BluetoothPermissionPluginPage\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 97
        testRunner.And("I \'Don’t allow\' permission request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 98
        testRunner.And("I terminate and relaunch the plugin app", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 99
        testRunner.Then("verify plugin is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
